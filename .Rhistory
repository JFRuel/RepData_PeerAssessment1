!(5 ==7)
False & False
FALSE & FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints>0)
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:30
5:20
select(cran,r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size<100500 & r_os == "linux-gnu")
filter(cran, size<100500 , r_os == "linux-gnu")
filter(cran, size>100500 & r_os == "linux-gnu")
filter(cran, size>100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version)
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
camera <- read.data("https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD",sep=",",header=TRUE)
camera <- read.table("https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD",sep=",",header=TRUE)
camera
head(camera)
clr
clr()
clear
clear()
library(XML)
Library(XML)
install(XML)
install.package(XML)
install.packages("XML")
library(XML)
getver
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages(c("jsonlite", "manipulate", "mime", "Rcpp"))
?matrix
?matrix
z <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","..\file.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","..\")
)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","file.csv")
library("swirl")
swirl()
quit
exit
exit()
swirl()
Higherthan <- function(filename="file.csv", variable = "VAL", value=24) {
## Read data
Input_Data <- read.csv(filename, colClasses = "character")
}
Higherthan
Higherthan()
Higherthan <- function(filename="file.csv", variable = "VAL", value=24) {
## Read data
Input_Data <- read.csv(filename, colClasses = "character")
filtered_data <- Input_Data[,Input_Data$VAL == value]
head(filetered_data)
}
Higherthan()
Higherthan <- function(filename="file.csv", variable = "VAL", value=24) {
## Read data
Input_Data <- read.csv(filename, colClasses = "character")
##filtered_data <- Input_Data[,Input_Data$VAL == value]
##head(filetered_data)
head(Input_Data)
}
Higherthan()
library(xlsx)
rowIndex <- 18:23
colIndex <- 7:15
dat <- read.xlsx("Quiz1Q2.xlsx",sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
##dat <- dat[as.numeric(dat[,c("Zip","Ext")])]
print dat
##sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
R.version()
R.Version()
R.Version()
library(xlsx)
R.Version()
version()
version
install.packages("xlsx")
library(xlsx)
install.packages("httr")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "c4a87aa74d34474fcb1f")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "b9ee1b959739237ea735a3ead81c7353164d1f7f")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
install.packages("rjson")
library(dplyr)
library(rjson)
file_url <- "http://donnees.ville.sherbrooke.qc.ca/storage/f/2014-02-20T19%3A04%3A03.343Z/restaurants.json"
resto_data <- fromJSON(paste(readLines(file_url), collapse=""))
library(dplyr)
library(rjson)
file_url <- "http://donnees.ville.sherbrooke.qc.ca/storage/f/2014-02-20T19%3A04%3A03.343Z/restaurants.json"
resto_data <- romJSON(file=file_url)
library(dplyr)
library(rjson)
file_url <- "http://donnees.ville.sherbrooke.qc.ca/storage/f/2014-02-20T19%3A04%3A03.343Z/restaurants.json"
resto_data <- romJSON(file=file_url)
asFrame <- do.call("rbind.fill", lapply(resto_data, as.data.frame))
library(dplyr)
library(rjson)
file_url <- "http://donnees.ville.sherbrooke.qc.ca/storage/f/2014-02-20T19%3A04%3A03.343Z/restaurants.json"
resto_data <- fromJSON(file=file_url)
asFrame <- do.call("rbind.fill", lapply(resto_data, as.data.frame))
library(dplyr)
library(rjson)
file_url <- "http://donnees.ville.sherbrooke.qc.ca/storage/f/2014-02-20T19%3A04%3A03.343Z/restaurants.json"
resto_data <- fromJSON(file=file_url)
##asFrame <- do.call("rbind.fill", lapply(resto_data, as.data.frame))
library(dplyr)
library(rjson)
file_url <- "http://donnees.ville.sherbrooke.qc.ca/storage/f/2014-02-20T19%3A04%3A03.343Z/restaurants.json"
resto_data <- fromJSON(file=file_url)
##asFrame <- do.call("rbind.fill", lapply(resto_data, as.data.frame))
library(dplyr)
library(rjson)
file_url <- "http://donnees.ville.sherbrooke.qc.ca/storage/f/2014-02-20T19%3A04%3A03.343Z/restaurants.json"
resto_data <- fromJSON(file=file_url)
asFrame <- do.call("rbind.fill", lapply(resto_data, as.data.frame))
library(dplyr)
library(rjson)
file_url <- "http://donnees.ville.sherbrooke.qc.ca/storage/f/2014-02-20T19%3A04%3A03.343Z/restaurants.json"
resto_data <- fromJSON(file=file_url)
asFrame <- do.call("rbind.fill", lapply(resto_data, as.data.frame),n=10)
library(dplyr)
library(rjson)
file_url <- "http://donnees.ville.sherbrooke.qc.ca/storage/f/2014-02-20T19%3A04%3A03.343Z/restaurants.json"
resto_data <- fromJSON(file=file_url)
asFrame <- do.call("rbind.fill", lapply(resto_data, as.data.frame),nrow=10)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","Quiz3Q1.csv")
library(dplyr)
DF <- tbl_df(read.csv("Quiz3Q1.csv"))
DF
?mutate
DF(RT)
DF[RT]
DF
DF("RT")
DF["RT"]
library(dplyr)
DF <- tbl_df(read.csv("Quiz3Q1.csv"))
agricultureLogical <- FALSE
if DF["RT"]="H" then agricultureLogical <- TRUE
library(dplyr)
DF <- tbl_df(read.csv("Quiz3Q1.csv"))
agricultureLogical <- FALSE
if(DF["RT"]="H") then agricultureLogical <- TRUE
library(dplyr)
DF <- tbl_df(read.csv("Quiz3Q1.csv"))
agricultureLogical <- FALSE
if(DF["RT"]="H"){agricultureLogical <- TRUE}
library(dplyr)
DF <- tbl_df(read.csv("Quiz3Q1.csv"))
agricultureLogical <- FALSE
if(DF["RT"]=="H"){agricultureLogical <- TRUE}
library(swirl)
swirl()
swirl()
Sys.getlocate("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubricate)
library(lubridate)
help(package = libridate)
help(package = lubridate)
todau()
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("dt1"02:22:14)
hms("dt1"02:22:14"")
hms("dt1"03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours=5, minutes=34)
this_moment
?now
now(tzone="America/New_York")
nyc <- now(tzone="America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- depart + hours(17) + minutes(34)
depart <- update(depart, hours=17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
new_interval(last_time, arrive, tzone=(last_time, 'Singapore'))
new_interval(last_time, arrive, tzone=(last_time, "Singapore"))
new_interval(last_time, arrive, tzone="Singapore")
how_long <- new_interval(last_time, arrive, "Singapore")
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
download.file("https://s3.amazonaws.com/coursera-uploads/user-55b5b8698bf40a86642e4694/973500/asst-3/cf5e16a0eaa911e48c2da1f34f0e56c7.txt","Student1.txt")
Dataset <- tbl_df(read.table("Student1.txt"))
library(dplyr)
Dataset <- tbl_df(read.table("Student1.txt"))
View(Dataset)
View(Dataset)
library(dplyr)
filename <- "https://s3.amazonaws.com/coursera-uploads/user-55b5b8698bf40a86642e4694/973500/asst-3/cf5e16a0eaa911e48c2da1f34f0e56c7.txt"
Dataset <- tbl_df(read.table(filename, heather=TRUE))
library(dplyr)
filename <- "https://s3.amazonaws.com/coursera-uploads/user-55b5b8698bf40a86642e4694/973500/asst-3/cf5e16a0eaa911e48c2da1f34f0e56c7.txt"
Dataset <- tbl_df(read.table(filename, header=TRUE))
library(dplyr)
filename <- "https://s3.amazonaws.com/coursera-uploads/user-55b5b8698bf40a86642e4694/973500/asst-3/cf5e16a0eaa911e48c2da1f34f0e56c7.txt"
Dataset <- tbl_df(read.table(filename))
Dataset <- tbl_df(read.table("Student1.txt", header=TRUE))
View(Dataset)
View(Dataset)
download.file("https://s3.amazonaws.com/coursera-uploads/user-7da16bb7453503da5ca01568/973500/asst-3/8da8b070dd1211e4bff015f1fc8beabb.txt","Student1.txt")
library(dplyr)
Dataset <- tbl_df(read.table("Student1.txt", header=TRUE))
View(Dataset)
View(Dataset)
download.files("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","Quiz4Q4GDP")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","Quiz4Q4GDP")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv","Quiz4Q4Educ")
library(lubridate)
Data_GDP <- read.csv("Quiz4Q4GDP.csv", header=TRUE)
Data_Educ <- read.csv("Quiz4Q4Educ.csv", header=TRUE)
Data_GDP <- filter(Data_GDP, Data_GDP[,1] != "")
Data_GDP <- filter(Data_GDP, Data_GDP[,2] != "")
library(data.table)
Data_GDP <- read.csv("Quiz4Q4GDP.csv", header=TRUE)
Data_Educ <- read.csv("Quiz4Q4Educ.csv", header=TRUE)
Data_GDP <- filter(Data_GDP, Data_GDP[,1] != "")
Data_GDP <- filter(Data_GDP, Data_GDP[,2] != "")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv","Quiz4Q4Educ.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","Quiz4Q4GDP.csv")
Data_GDP <- read.csv("Quiz4Q4GDP.csv", header=TRUE)
Data_Educ <- read.csv("Quiz4Q4Educ.csv", header=TRUE)
Data_GDP <- filter(Data_GDP, Data_GDP[,1] != "")
Data_GDP <- filter(Data_GDP, Data_GDP[,2] != "")
library(dplyr)
Data_GDP <- read.csv("Quiz4Q4GDP.csv", header=TRUE)
Data_Educ <- read.csv("Quiz4Q4Educ.csv", header=TRUE)
Data_GDP <- filter(Data_GDP, Data_GDP[,1] != "")
Data_GDP <- filter(Data_GDP, Data_GDP[,2] != "")
View(Data_GDP)
View(Data_GDP)
View(Data_Educ)
View(Data_Educ)
grep("June",Data_Educ$Special.Notes)
table(grepl("June",Data_Educ$Special.Notes))
table(grepl("Fiscal year end: June",Data_Educ$Special.Notes))
pollution <- read.csv("data\avgpm25.csv",colClasses = c("numeric","character","factor","numeric","numeric"))
head(pollution)
pollution <- read.csv("data/avgpm25.csv",colClasses = c("numeric","character","factor","numeric","numeric"))
head(pollution)
pollution <- read.csv("data/avgpm25.csv",colClasses = c("numeric","character","factor","numeric","numeric"))
head(pollution)
boxplot(pollution$pm25)
hist(pollution$pm25)
rug(pollution$pm25)
hist(pollution$pm25, break=50)
hist(pollution$pm25, breaks=50)
pollution <- read.csv("data/avgpm25.csv",colClasses = c("numeric","character","factor","numeric","numeric"))
head(pollution)
boxplot(pollution$pm25)
plot(pollution$pm25)
hist(pollution$pm25)
?par
hist(pollution$pm25)
with(pollution, plot(om25,fips))
with(pollution, plot(pm25,fips))
par("lty")
lines(pollution$fips)
lines(pollution$fips)
text("Left","right")
title("FIPS and PM25")
x <- rand(100)
x <- rnorm(100)
hist(x)
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
y <- rnorm(100)
x <- rnorm(100)
plot(x,y)
plot(x,y, pch=20)
plot(x,y, pch=15)
plot(x,y, pch=10)
plot(x,y, pch=21)
text(-2,-2,"Label")
Legend("topleft",legent="Data")
Legend("topleft",legend="Data")
legend("topleft",legend="Data")
library(datasets)
airquality
install.packages("lattice")
library("lattice")
xyplot(Ozone ~ Wind, data=ariqulity)
xyplot(Ozone ~ Wind, data=ariquality)
xyplot(Ozone ~ Wind, data=airquality)
xyplot(Ozone ~ Wind | Month, data=airquality)
f <- rep(0:1, each(50))
f <- rep(0:1, each = 50)
f
install.packages("ggplot2")
mpg
library(ggplot2)
mpg
head(mpg)
qplot(displ,hwy, data=mpg)
qplot(displ,hwy, data=mpg, color=drv)
qplot(displ,hwy, data=mpg, color=drv, geom=c("point","smooth"))
qplot(displ,hwy, data=mpg, geom=c("point","smooth"))
qplot(hwy,data=mpg)
qplot(hwy,data=mpg, color=drv)
qplot(hwy,data=mpg, fill=drv)
qplot(displ,hwy,data=mpg, facet=manufacturer~drv)
qplot(displ,hwy,data=mpg, facets=manufacturer~drv)
qplot(displ,hwy,data=mpg, facets=class~drv)
qplot(displ,hwy,data=mpg, facets=class~drv, binwidth=3)
qplot(hwy,data=mpg, facets=class~drv, binwidth=3)
install.packages("lattice")
install.packages("nlme")
library("nlme")
library("lattice")
BodyWeight
xyplot(weight~Time|Diet, BodyWeight)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
data(airquality)
head(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(1234)
par(mar(c(0,0,0,0)))
par(mar=(c(0,0,0,0)))
sed.seed(12345)
set.seed(12345)
dataMatrix <- matrix(rnorm(400),nrow=40)
dataMatrix
image(1:10, 1:40, t(dataMatrix) [,nrow(dataMatrix):1])
heatmap(dataMatrix)
?hclust
hh <- hclust(dataMatrix)
hh <- hclust(dist(dataMatrix))
hh
install.packages(RColorBrewer)
install.packages(Rcolorbrewer)
install.packages("RColorBrewer")
ti <- rbinom(300,size=1, prob=0.5)
ti
ti <- rbinom(300,size=2, prob=0.5)
ti
ti <- rbinom(300,size=7, prob=0.5)
ti
---
title: "First_attempt.Rmd"
author: "JF Ruel"
date: "Sunday, July 12, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
setwd("C:/Users/jfrue_000.MAISON/R/Course5/RepData_PeerAssessment1")
?mean
?median
install.libraries("xtable")
install.library("xtable")
install.packages("xtable")
